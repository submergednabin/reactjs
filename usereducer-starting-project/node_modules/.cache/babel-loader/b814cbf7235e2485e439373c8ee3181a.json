{"ast":null,"code":"var _jsxFileName = \"/Users/nabinkhatri/Documents/ReactProjects/newReactProject/usereducer-starting-project/src/components/Login/Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer, useContext } from 'react';\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\nimport AuthContext from '../store/auth-context';\nimport Input from '../UI/Input/Input'; //we declared outside of the Login function because it doesn't need to be interacted with in the function\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst emailReducer = (state, action) => {\n  if (action.type === 'USER_INPUT') {\n    return {\n      value: action.val,\n      isValid: action.val.includes('@')\n    };\n  }\n\n  if (action.type === 'INPUT_BLUR') {\n    return {\n      value: state.value,\n      isValid: state.value.includes('@')\n    };\n  }\n\n  return {\n    value: '',\n    isValid: false\n  };\n};\n\nconst passwordReducer = (state, action) => {\n  if (action.type === 'USER_INPUT') {\n    return {\n      value: action.val,\n      isValid: action.val.trim().length > 6\n    };\n  }\n\n  if (action.type === 'INPUT_BLUR') {\n    return {\n      value: state.value,\n      isValid: state.value.trim().length > 6\n    };\n  }\n\n  return {\n    value: '',\n    isValid: false\n  };\n};\n\nconst Login = props => {\n  _s();\n\n  // const [enteredEmail, setEnteredEmail] = useState('');\n  // const [emailIsValid, setEmailIsValid] = useState();\n  // const [enteredPassword, setEnteredPassword] = useState('');\n  // const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false); // Naming convention can by any here in reducer\n\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: '',\n    isValid: false\n  });\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\n    value: '',\n    isValid: false\n  });\n  const authCtx = useContext(AuthContext);\n  useEffect(() => {\n    console.log('EFFECT RUNNING');\n    return () => {\n      console.log('EFFECT CLEANUP');\n    };\n  }, []);\n  const {\n    isValid: emailIsValid\n  } = emailState;\n  const {\n    isValid: passwordIsValid\n  } = passwordState;\n  useEffect(() => {\n    const identifier = setTimeout(() => {\n      console.log('Checking form validity!');\n      setFormIsValid(emailState.isValid && passwordState.isValid);\n    }, 500);\n    return () => {\n      console.log('CLEANUP');\n      clearTimeout(identifier);\n    };\n  }, [emailIsValid, passwordIsValid]);\n\n  const emailChangeHandler = event => {\n    // setEnteredEmail(event.target.value);\n    dispatchEmail({\n      type: 'USER_INPUT',\n      val: event.target.value\n    }); // setFormIsValid(\n    //   event.target.value.includes('@') && passwordState.isValid\n    // );\n  };\n\n  const passwordChangeHandler = event => {\n    // setEnteredPassword(event.target.value);\n    dispatchPassword({\n      type: 'USER_INPUT',\n      val: event.target.value\n    }); // setFormIsValid(\n    //   emailState.isValid && event.target.value.trim().length > 6\n    // );\n  };\n\n  const validateEmailHandler = () => {\n    // setEmailIsValid(emailState.isValid);\n    dispatchEmail({\n      type: 'INPUT_BLUR'\n    });\n  };\n\n  const validatePasswordHandler = () => {\n    // setPasswordIsValid(enteredPassword.trim().length > 6);\n    dispatchPassword({\n      type: 'INPUT_BLUR'\n    });\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    authCtx.onLogin(emailState.value, passwordState.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        id: \"email\",\n        label: \"E-mail\",\n        type: \"email\",\n        isValid: emailIsValid,\n        value: emailState.value,\n        onChange: emailChangeHandler,\n        onBlur: validateEmailHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        id: \"password\",\n        label: \"Password\",\n        type: \"password\",\n        isValid: passwordIsValid,\n        value: passwordState.value,\n        onChange: passwordChangeHandler,\n        onBlur: validatePasswordHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          disabled: !formIsValid,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"ud9qWytj0J+GBt3j8GUsbIUC9K0=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/nabinkhatri/Documents/ReactProjects/newReactProject/usereducer-starting-project/src/components/Login/Login.js"],"names":["React","useState","useEffect","useReducer","useContext","Card","classes","Button","AuthContext","Input","emailReducer","state","action","type","value","val","isValid","includes","passwordReducer","trim","length","Login","props","formIsValid","setFormIsValid","emailState","dispatchEmail","passwordState","dispatchPassword","authCtx","console","log","emailIsValid","passwordIsValid","identifier","setTimeout","clearTimeout","emailChangeHandler","event","target","passwordChangeHandler","validateEmailHandler","validatePasswordHandler","submitHandler","preventDefault","onLogin","login","actions","btn"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useReducer, useContext } from 'react';\n\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\nimport AuthContext from '../store/auth-context';\nimport Input from '../UI/Input/Input';\n\n//we declared outside of the Login function because it doesn't need to be interacted with in the function\nconst emailReducer = (state, action) => {\n  if(action.type === 'USER_INPUT'){\n    return { value: action.val, isValid: action.val.includes('@') };\n  }\n  if(action.type === 'INPUT_BLUR'){\n    return { value: state.value, isValid: state.value.includes('@') };\n  }\n  return { value: '', isValid: false };\n};\n\n\nconst passwordReducer = (state, action) => {\n  if(action.type === 'USER_INPUT'){\n    return { value: action.val, isValid: action.val.trim().length > 6 };\n  }\n  if(action.type === 'INPUT_BLUR'){\n    return { value: state.value, isValid: state.value.trim().length > 6 };\n  }\n  return { value: '', isValid: false };\n}\n\nconst Login = (props) => {\n  // const [enteredEmail, setEnteredEmail] = useState('');\n  // const [emailIsValid, setEmailIsValid] = useState();\n  // const [enteredPassword, setEnteredPassword] = useState('');\n  // const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  // Naming convention can by any here in reducer\n  const [emailState, dispatchEmail] = useReducer(emailReducer,{\n    value:'', \n    isValid:false,\n  });\n\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer,{\n    value:'',\n    isValid:false,\n  });\n\n  const authCtx = useContext(AuthContext);\n\n  useEffect(() => {\n    console.log('EFFECT RUNNING');\n\n    return () => {\n      console.log('EFFECT CLEANUP');\n    };\n  }, []);\n\n  const { isValid: emailIsValid } = emailState;\n  const { isValid: passwordIsValid} = passwordState;\n  useEffect(() => {\n    const identifier = setTimeout(() => {\n      console.log('Checking form validity!');\n      setFormIsValid(\n        emailState.isValid && passwordState.isValid\n      );\n    }, 500);\n\n    return () => {\n      console.log('CLEANUP');\n      clearTimeout(identifier);\n    };\n  }, [emailIsValid, passwordIsValid]);\n\n  const emailChangeHandler = (event) => {\n    // setEnteredEmail(event.target.value);\n    dispatchEmail({type: 'USER_INPUT', val: event.target.value});\n\n    // setFormIsValid(\n    //   event.target.value.includes('@') && passwordState.isValid\n    // );\n  };\n\n  const passwordChangeHandler = (event) => {\n    // setEnteredPassword(event.target.value);\n    dispatchPassword({type: 'USER_INPUT', val: event.target.value})\n\n    // setFormIsValid(\n    //   emailState.isValid && event.target.value.trim().length > 6\n    // );\n  };\n\n  const validateEmailHandler = () => {\n    // setEmailIsValid(emailState.isValid);\n    dispatchEmail({type: 'INPUT_BLUR'});\n  };\n\n  const validatePasswordHandler = () => {\n    // setPasswordIsValid(enteredPassword.trim().length > 6);\n    dispatchPassword({type:'INPUT_BLUR'})\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    authCtx.onLogin(emailState.value, passwordState.value);\n  };\n\n  return (\n    <Card className={classes.login}>\n      <form onSubmit={submitHandler}>\n       <Input\n        id=\"email\" \n        label=\"E-mail\" \n        type=\"email\" \n        isValid={emailIsValid} \n        value={emailState.value}\n        onChange={emailChangeHandler}\n        onBlur={validateEmailHandler}\n       />\n       <Input\n        id=\"password\" \n        label=\"Password\" \n        type=\"password\" \n        isValid={passwordIsValid} \n        value={passwordState.value}\n        onChange={passwordChangeHandler}\n        onBlur={validatePasswordHandler}\n\n       />\n        \n        <div className={classes.actions}>\n          <Button type=\"submit\" className={classes.btn} disabled={!formIsValid}>\n            Login\n          </Button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}