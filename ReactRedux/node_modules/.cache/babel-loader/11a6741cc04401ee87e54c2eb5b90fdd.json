{"ast":null,"code":"// import { createStore } from \"redux\";\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n}; // createSlice is a hooks from @redux toolkit and used to replace the traditional redux pattern\n\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n});\nconst initialAuthState = {\n  isAuthenticated: false\n};\nconst authSlice = createSlice({\n  name: 'authentication',\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n\n  }\n}); // const counterReducer = (state = initialState , action) => {\n//     if(action.type === 'increment'){\n//         return{\n//             counter: state.counter + 1, \n//             showCounter: state.showCounter\n//         }\n//     }\n//     if(action.type === 'decrement'){\n//         return {\n//             counter: state.counter - 1,\n//             showCounter: state.showCounter\n//         }\n//     }\n//     if(action.type === 'increase'){\n//         return {\n//             counter: state.counter + action.value,\n//             showCounter: state.counter,\n//         }\n//     }\n//     if(action.type === 'toggle'){\n//         return {\n//             showCounter: !state.showCounter,\n//             counter: state.counter\n//         }\n//     }\n//     return state;\n// } ;\n// const store = createStore(counterReducer);\n\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\nexport const counterActions = counterSlice.actions;\nexport default store;","map":{"version":3,"sources":["/Users/nabinkhatri/Documents/ReactProjects/newReactProject/ReactRedux/src/store/index.js"],"names":["createSlice","configureStore","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","toggleCounter","initialAuthState","isAuthenticated","authSlice","login","logout","store","reducer","auth","counterActions","actions"],"mappings":"AAAA;AACA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C;AAGA,MAAMC,mBAAmB,GAAG;AAAEC,EAAAA,OAAO,EAAE,CAAX;AAAcC,EAAAA,WAAW,EAAE;AAA3B,CAA5B,C,CACA;;AACA,MAAMC,YAAY,GAAGL,WAAW,CAAC;AAC7BM,EAAAA,IAAI,EAAE,SADuB;AAE7BC,EAAAA,YAAY,EAAEL,mBAFe;AAG7BM,EAAAA,QAAQ,EAAE;AACNC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AACbA,MAAAA,KAAK,CAACP,OAAN;AACH,KAHK;;AAINQ,IAAAA,SAAS,CAACD,KAAD,EAAQ;AACbA,MAAAA,KAAK,CAACP,OAAN;AACH,KANK;;AAONS,IAAAA,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAgB;AACpBH,MAAAA,KAAK,CAACP,OAAN,GAAgBO,KAAK,CAACP,OAAN,GAAgBU,MAAM,CAACC,OAAvC;AACH,KATK;;AAUNC,IAAAA,aAAa,CAACL,KAAD,EAAQ;AACjBA,MAAAA,KAAK,CAACN,WAAN,GAAoB,CAACM,KAAK,CAACN,WAA3B;AACH;;AAZK;AAHmB,CAAD,CAAhC;AAmBA,MAAMY,gBAAgB,GAAG;AACrBC,EAAAA,eAAe,EAAE;AADI,CAAzB;AAGA,MAAMC,SAAS,GAAElB,WAAW,CAAC;AACzBM,EAAAA,IAAI,EAAE,gBADmB;AAEzBC,EAAAA,YAAY,EAAES,gBAFW;AAGzBR,EAAAA,QAAQ,EAAE;AACNW,IAAAA,KAAK,CAACT,KAAD,EAAQ;AACTA,MAAAA,KAAK,CAACO,eAAN,GAAwB,IAAxB;AACH,KAHK;;AAING,IAAAA,MAAM,CAACV,KAAD,EAAQ;AACVA,MAAAA,KAAK,CAACO,eAAN,GAAwB,KAAxB;AACH;;AANK;AAHe,CAAD,CAA5B,C,CAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA,MAAMI,KAAK,GAAGpB,cAAc,CAAC;AACzBqB,EAAAA,OAAO,EAAE;AAAEnB,IAAAA,OAAO,EAAEE,YAAY,CAACiB,OAAxB;AAAiCC,IAAAA,IAAI,EAAEL,SAAS,CAACI;AAAjD;AADgB,CAAD,CAA5B;AAIA,OAAO,MAAME,cAAc,GAAGnB,YAAY,CAACoB,OAApC;AAEP,eAAeJ,KAAf","sourcesContent":["// import { createStore } from \"redux\";\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\n\n\nconst initialCounterState = { counter: 0, showCounter: true };\n// createSlice is a hooks from @redux toolkit and used to replace the traditional redux pattern\nconst counterSlice = createSlice({\n    name: 'counter',\n    initialState: initialCounterState,\n    reducers: {\n        increment(state) {\n            state.counter++;\n        },\n        decrement(state) {\n            state.counter--;\n        },\n        increase(state, action) {\n            state.counter = state.counter + action.payload;\n        },\n        toggleCounter(state) {\n            state.showCounter = !state.showCounter;\n        }\n    }\n});\n\nconst initialAuthState = {\n    isAuthenticated: false\n}\nconst authSlice =createSlice({\n    name: 'authentication',\n    initialState: initialAuthState,\n    reducers: {\n        login(state) {\n            state.isAuthenticated = true;\n        },\n        logout(state) {\n            state.isAuthenticated = false;\n        }\n    }\n});\n\n// const counterReducer = (state = initialState , action) => {\n//     if(action.type === 'increment'){\n//         return{\n//             counter: state.counter + 1, \n//             showCounter: state.showCounter\n//         }\n//     }\n//     if(action.type === 'decrement'){\n//         return {\n//             counter: state.counter - 1,\n//             showCounter: state.showCounter\n//         }\n//     }\n\n//     if(action.type === 'increase'){\n//         return {\n//             counter: state.counter + action.value,\n//             showCounter: state.counter,\n\n//         }\n//     }\n\n//     if(action.type === 'toggle'){\n//         return {\n//             showCounter: !state.showCounter,\n//             counter: state.counter\n//         }\n//     }\n\n//     return state;\n// } ;\n// const store = createStore(counterReducer);\nconst store = configureStore({\n    reducer: { counter: counterSlice.reducer, auth: authSlice.reducer },\n});\n\nexport const counterActions = counterSlice.actions;\n\nexport default store;"]},"metadata":{},"sourceType":"module"}